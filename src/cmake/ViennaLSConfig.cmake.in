@PACKAGE_INIT@

# ViennaLS requires C++17
set(CMAKE_CXX_STANDARD "17")

# ##################################################################################################
# compiler dependent settings for ViennaLS
# ##################################################################################################
if(OMP_PARALLELIZE)
  find_package(OpenMP REQUIRED)
  list(APPEND VIENNALS_LIBRARIES OpenMP::OpenMP_CXX)
endif()

# compiler dependent settings
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  # disable-new-dtags sets RPATH which searches for libs recursively, instead of RUNPATH which does
  # not needed for g++ to link correctly
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--disable-new-dtags")
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  # SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /openmp /wd\"4267\" /wd\"4244\"")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd\"4267\" /wd\"4244\"")
endif()

if(ViennaLS_COMMON_TARGET)
  set(VIENNALS_INCLUDE_DIRS "${VIENNAHRLE_INCLUDE_DIRS}" "@VIENNALS_BUILD_INCLUDE_DIRS@")
else(ViennaLS_COMMON_TARGET)
  set(VIENNALS_INCLUDE_DIRS "${VIENNAHRLE_INCLUDE_DIRS}"
                            "@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_INCLUDEDIR@")
  # include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")
endif()

# Capturing the variables from configuration time
set(ViennaHRLE_DIR @ViennaHRLE_DIR@)

find_package(ViennaHRLE REQUIRED PATHS ${ViennaHRLE_DIR} NO_DEFAULT_PATH)
list(APPEND VIENNALS_INCLUDE_DIRS ${VIENNAHRLE_INCLUDE_DIRS})

set(VIENNALS_USE_VTK @VIENNALS_USE_VTK@)
if(@VIENNALS_USE_VTK@)
  set(VTK_DIR @VTK_DIR@)

  # If VIENNALS_USE_VTK is set to true, we expect vtk to be found. Otherwise throw an error.
  find_package(
    VTK REQUIRED
    # COMPONENTS VTK::CommonCore
    #            VTK::IOCore
    #            VTK::IOXML
    #            VTK::IOXMLParser
    #            VTK::FiltersCore
    #            VTK::FiltersGeneral
    #            VTK::FiltersGeometry
               PATHS
               ${VTK_DIR}
               NO_DEFAULT_PATH)

  # message(STATUS "Found VTK")
  add_compile_definitions(VIENNALS_USE_VTK)

  # use VTK_USE_FILE for older versions of VTK
  if(VTK_VERSION VERSION_LESS "8.90")
    message(STATUS "Using old VTK Version: ${VTK_VERSION}")
    set(VTK_LIBRARIES
        vtksys;vtkIOCore;vtkexpat;vtklz4;vtkzlib;vtklzma;vtkdoubleconversion;vtkCommonMisc;vtkCommonSystem;vtkIOXML;vtkFiltersCore;vtkFiltersGeneral;vtkFiltersGeometry;vtkCommonExecutionModel;vtkCommonDataModel;vtkCommonColor;vtkIOXMLParser;vtkIOCore;vtkCommonMisc;vtkCommonComputationalGeometry;vtkCommonTransforms;vtkCommonMath;
    )
    include(${VTK_USE_FILE})
  else()
    # For newer versions of VTK, only the target syntax is supported. This also automatically adds
    # the vtk include directories.
    set(VTK_LIBRARIES
        VTK::CommonCore;VTK::IOCore;VTK::IOXML;VTK::IOXMLParser;VTK::FiltersCore;VTK::FiltersGeneral;VTK::FiltersGeometry;
    )
  endif()

  list(APPEND VIENNALS_LIBRARIES ${VTK_LIBRARIES})
  list(APPEND VIENNALS_PYTHON_LIBRARIES ${VTK_LIBRARIES})
endif()

if(@VIENNALS_BUILD_SHARED_LIBS@)
  option(VIENNALS_USE_SHARED_LIBS "Use precompiled headers" ON)
  if(VIENNALS_USE_SHARED_LIBS)
    add_definitions(-DVIENNALS_USE_SHARED_LIBS)
  endif(VIENNALS_USE_SHARED_LIBS)
endif()

if(VIENNALS_USE_SHARED_LIBS)
  link_directories(@CMAKE_INSTALL_PREFIX@lib)
  list(APPEND VIENNALS_LIBRARIES @PROJECT_NAME@)
endif()

check_required_components("@PROJECT_NAME@")
